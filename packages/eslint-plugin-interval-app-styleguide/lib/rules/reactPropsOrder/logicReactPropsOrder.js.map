{"version":3,"file":"logicReactPropsOrder.js","sourceRoot":"","sources":["../../../src/rules/reactPropsOrder/logicReactPropsOrder.ts"],"names":[],"mappings":";;;AACA,mCAAiC;AAEjC,qFAGqD;AAE9C,MAAM,oBAAoB,GAAG,CAClC,OAAyC,EAClB,EAAE;IACzB,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAE3C,OAAO;QACL,iBAAiB,CAAC,IAAI;YACpB,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,IAAA,4CAAsB,EACrD,IAAI,CAAC,UAAU,EACf,UAAU,CACX,CAAC;YAEF,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAC1C,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,oBAAoB,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CACpE,CAAC;YAEF,MAAM,WAAW,GAAG,IAAA,uCAAiB,EACnC,SAAS,EACT,WAAW,EACX,UAAU,CACX,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,cAAc,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;YAExE,IAAI,IAAA,gBAAO,EAAC,aAAa,EAAE,WAAW,CAAC;gBAAE,OAAO;YAEhD,OAAO,CAAC,MAAM,CAAC;gBACb,SAAS,EAAE,gBAAgB;gBAC3B,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,CAAC,GAAG,CAAC,KAAK;oBACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAC3C,MAAM,KAAK,CAAC,WAAW,CACrB,aAAa,CAAC,CAAC,CAAC,EAChB,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CACnC,CAAC;qBACH;gBACH,CAAC;aACF,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAtCW,QAAA,oBAAoB,wBAsC/B","sourcesContent":["import { TSESLint } from \"@typescript-eslint/experimental-utils\";\nimport { isEqual } from \"lodash\";\n\nimport {\n  getCategorizedElements,\n  getSortedElements,\n} from \"@styleguide/rules/utils/elementOrderHelpers\";\n\nexport const checkOrderReactProps = (\n  context: TSESLint.RuleContext<string, []>\n): TSESLint.RuleListener => {\n  const sourceCode = context.getSourceCode();\n\n  return {\n    JSXOpeningElement(node) {\n      const [restProps, dollarProps] = getCategorizedElements(\n        node.attributes,\n        sourceCode\n      );\n\n      const unsortedProps = node.attributes.filter(\n        (prop) => prop.type !== \"JSXSpreadAttribute\" && prop.value !== null\n      );\n\n      const sortedProps = getSortedElements(\n        restProps,\n        dollarProps,\n        sourceCode\n      ).filter((prop) => prop.type === \"JSXAttribute\" && prop.value !== null);\n\n      if (isEqual(unsortedProps, sortedProps)) return;\n\n      context.report({\n        messageId: \"defaultMessage\",\n        loc: node.loc,\n        *fix(fixer) {\n          for (let i = 0; i < sortedProps.length; i++) {\n            yield fixer.replaceText(\n              unsortedProps[i],\n              sourceCode.getText(sortedProps[i])\n            );\n          }\n        },\n      });\n    },\n  };\n};\n"]}