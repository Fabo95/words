{"version":3,"file":"logicNoVolatileImport.js","sourceRoot":"","sources":["../../../src/rules/noVolatileImport/logicNoVolatileImport.ts"],"names":[],"mappings":"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","sourcesContent":["import { TSESLint } from \"@typescript-eslint/experimental-utils\";\nimport { TSESTree } from \"@typescript-eslint/experimental-utils/dist/ts-estree\";\n\nimport {\n  getIsNormalizedPathInOptionsPaths,\n  getNormalizedPath,\n  getTruncatedImportPath,\n  getImportPath,\n} from \"@styleguide/rules/noVolatileImport/utils/noVolatileImportHelpers\";\nimport { NoVolatileImportOptions } from \"@styleguide/rules/noVolatileImport/utils/noVolatileImportTypes\";\n\nexport const checkNoVolatileImport = (\n  context: TSESLint.RuleContext<string, NoVolatileImportOptions[]>\n): TSESLint.RuleListener => ({\n  ImportDeclaration(node) {\n    testAndReport({ context, node });\n  },\n});\n\n/**\n * Checks an import statement and reports if it violates the \"No Volatile Import\" rule.\n *\n * Volatile imports refer to the practice of importing modules from locations that do not belong to the current module.\n *\n * @param {TSESLint.RuleContext<string, []>} context - The rule context object provided by ESLint, which includes information and methods related to the rule being executed.\n * @param {TSESTree.StringLiteral} node - The AST node.\n * @returns {void}\n *\n */\n\nconst testAndReport = ({\n  context,\n  node,\n}: {\n  context: TSESLint.RuleContext<string, NoVolatileImportOptions[]>;\n  node: TSESTree.ImportDeclaration;\n}): void => {\n  const options = context.options[0];\n\n  const importSource = node.source.value;\n\n  const filePath = context.getFilename();\n  const importPath = getImportPath({ importSource, context });\n\n  const normalizedImportPath = getNormalizedPath({\n    path: importPath,\n  });\n\n  const normalizedFilePath = getNormalizedPath({\n    path: filePath,\n  });\n\n  if (\n    normalizedImportPath.includes(\"node_modules\") ||\n    normalizedImportPath.includes(\"packages\")\n  ) {\n    return;\n  }\n\n  const isImportPathExcluded = getIsNormalizedPathInOptionsPaths({\n    normalizedPath: normalizedImportPath,\n    optionsPaths: options.excludedImportPaths,\n  });\n\n  const isFilePathExcluded = getIsNormalizedPathInOptionsPaths({\n    normalizedPath: normalizedFilePath,\n    optionsPaths: options.excludedFilePaths,\n  });\n\n  const isImportPathIncluded = getIsNormalizedPathInOptionsPaths({\n    normalizedPath: normalizedImportPath,\n    optionsPaths: options.includedImportPaths,\n  });\n\n  const isFilePathIncluded = getIsNormalizedPathInOptionsPaths({\n    normalizedPath: normalizedFilePath,\n    optionsPaths: options.includedFilePaths,\n  });\n\n  if (isImportPathExcluded || isFilePathExcluded) {\n    return;\n  }\n\n  if (\n    (options.includedImportPaths !== undefined && !isImportPathIncluded) ||\n    (options.includedFilePaths !== undefined && !isFilePathIncluded)\n  ) {\n    return;\n  }\n\n  const importPathSegments = normalizedImportPath.split(\"/\");\n\n  const isImportFolderInPathSegments = importPathSegments.some((segment) =>\n    options.importFolders?.includes(segment)\n  );\n\n  if (!isImportFolderInPathSegments) {\n    context.report({\n      data: {\n        tmp: `CURRENT VALUES 1 -> normalizedFilePath: ${normalizedFilePath}; normalizedImportPath: ${normalizedImportPath}`,\n      },\n      messageId: \"defaultMessage\",\n      loc: node.source.loc,\n    });\n  }\n\n  const truncatedImportPath = getTruncatedImportPath({\n    importPathSegments: importPathSegments,\n    importFolder: options.importFolders,\n  });\n\n  const isTruncatedImportPathInFilePath =\n    normalizedFilePath?.includes(truncatedImportPath);\n\n  if (isTruncatedImportPathInFilePath) {\n    return;\n  }\n\n  context.report({\n    data: {\n      tmp: `CURRENT VALUES 2 -> normalizedFilePath: ${normalizedFilePath}; truncatedImportPath: ${truncatedImportPath}`,\n    },\n    messageId: \"defaultMessage\",\n    loc: node.source.loc,\n  });\n};\n"]}