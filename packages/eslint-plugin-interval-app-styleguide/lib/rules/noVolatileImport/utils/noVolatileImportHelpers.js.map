{"version":3,"file":"noVolatileImportHelpers.js","sourceRoot":"","sources":["../../../../src/rules/noVolatileImport/utils/noVolatileImportHelpers.ts"],"names":[],"mappings":";;;AAAA,yDAAkD;AAI3C,MAAM,iBAAiB,GAAG,CAAC,EAAE,IAAI,EAAoB,EAAE,EAAE;IAC9D,MAAM,uBAAuB,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAEnD,MAAM,eAAe,GAAG,uBAAuB,CAAC;IAEhD,MAAM,oBAAoB,GAAG,eAAe,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAE3E,IAAI,oBAAoB,EAAE;QACxB,oCAAoC;QACpC,MAAM,mBAAmB,GAAG,uBAAuB,CAAC,OAAO,CACzD,eAAe,EACf,EAAE,CACH,CAAC;QAEF,OAAO,mBAAmB,CAAC,UAAU,CAAC,GAAG,CAAC;YACxC,CAAC,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,CAAC;YAClC,CAAC,CAAC,mBAAmB,CAAC;KACzB;IAED,OAAO,uBAAuB,CAAC,UAAU,CAAC,GAAG,CAAC;QAC5C,CAAC,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,uBAAuB,CAAC;AAC9B,CAAC,CAAC;AAtBW,QAAA,iBAAiB,qBAsB5B;AAEK,MAAM,iCAAiC,GAAG,CAAC,EAChD,YAAY,EACZ,cAAc,GAIf,EAAE,EAAE,CAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;AANlE,QAAA,iCAAiC,qCAMiC;AAExE,MAAM,sBAAsB,GAAG,CAAC,EACrC,kBAAkB,EAClB,YAAY,GAIb,EAAE,EAAE;IACH,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,EAAE,CACrE,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,QAAQ,CAAC,WAAW,CAAC,CACpC,CAAC;IAEF,MAAM,2BAA2B,GAC/B,iBAAiB,KAAK,CAAC,CAAC;QACtB,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,CAAC;QAChD,CAAC,CAAC,kBAAkB,CAAC;IAEzB,OAAO,2BAA2B,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC/C,CAAC,CAAC;AAjBW,QAAA,sBAAsB,0BAiBjC;AAEK,MAAM,aAAa,GAAG,CAAC,EAC5B,YAAY,EACZ,OAAO,GAIR,EAAE,EAAE;IACH,MAAM,UAAU,GAAG,IAAA,iBAAO,EAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAElD,OAAO,UAAU,IAAI,YAAY,CAAC;AACpC,CAAC,CAAC;AAVW,QAAA,aAAa,iBAUxB","sourcesContent":["import resolve from \"eslint-module-utils/resolve\";\nimport { TSESLint } from \"@typescript-eslint/experimental-utils\";\nimport { NoVolatileImportOptions } from \"@styleguide/rules/noVolatileImport/utils/noVolatileImportTypes\";\n\nexport const getNormalizedPath = ({ path }: { path: string }) => {\n  const caseInsensitiveFilePath = path.toLowerCase();\n\n  const fileNamePattern = /\\/([^\\/]+)\\.([^\\/.]+)/;\n\n  const isFileNameInFilePath = fileNamePattern.test(caseInsensitiveFilePath);\n\n  if (isFileNameInFilePath) {\n    // Remove the filename from the path\n    const pathWithoutFileName = caseInsensitiveFilePath.replace(\n      fileNamePattern,\n      \"\"\n    );\n\n    return pathWithoutFileName.startsWith(\"/\")\n      ? pathWithoutFileName.substring(1)\n      : pathWithoutFileName;\n  }\n\n  return caseInsensitiveFilePath.startsWith(\"/\")\n    ? caseInsensitiveFilePath.substring(1)\n    : caseInsensitiveFilePath;\n};\n\nexport const getIsNormalizedPathInOptionsPaths = ({\n  optionsPaths,\n  normalizedPath,\n}: {\n  optionsPaths?: string[];\n  normalizedPath: string;\n}) => optionsPaths?.some((path) => new RegExp(path, \"i\").test(normalizedPath));\n\nexport const getTruncatedImportPath = ({\n  importPathSegments,\n  importFolder,\n}: {\n  importPathSegments: string[];\n  importFolder: string[];\n}) => {\n  const importFolderIndex = importPathSegments.findIndex((pathSegment) =>\n    importFolder?.includes(pathSegment)\n  );\n\n  const truncatedImportPathSegments =\n    importFolderIndex !== -1\n      ? importPathSegments.slice(0, importFolderIndex)\n      : importPathSegments;\n\n  return truncatedImportPathSegments.join(\"/\");\n};\n\nexport const getImportPath = ({\n  importSource,\n  context,\n}: {\n  importSource: string;\n  context: TSESLint.RuleContext<string, NoVolatileImportOptions[]>;\n}) => {\n  const importPath = resolve(importSource, context);\n\n  return importPath || importSource;\n};\n"]}