{"version":3,"file":"keysOrderHelpers.js","sourceRoot":"","sources":["../../../../src/rules/keysOrder/utils/keysOrderHelpers.ts"],"names":[],"mappings":";;;AAAA,8EAG+C;AAO/C,MAAM,0CAA0C,GAG5C;IACF,kFAAkF;IAClF,CAAC,mCAAc,CAAC,cAAc,CAAC,EAAE,CAAC,MAA+B,EAAE,EAAE;IACnE,kFAAkF;IAClF,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IAC1C,kFAAkF;IAClF,CAAC,mCAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAyB,EAAE,EAAE;IACvD,kFAAkF;IAClF,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;CACrC,CAAC;AAEF;;;GAGG;AACI,MAAM,uBAAuB,GAAG,CAAC,MAAiB,EAAE,EAAE;;IAC3D,OAAA,MAAA,0CAA0C,CACxC,MAAM,CAAC,IAAqC,CAC7C,2FAAG,MAAM,CAAC,CAAA;CAAA,CAAC;AAHD,QAAA,uBAAuB,2BAGtB","sourcesContent":["import {\n  AST_NODE_TYPES,\n  TSESTree,\n} from '@typescript-eslint/experimental-utils';\nimport { Rule } from 'eslint';\n\ntype KeyOrderRuleExceptionNodeType =\n  | AST_NODE_TYPES.CallExpression\n  | AST_NODE_TYPES.Property;\n\nconst nodeParentTypeToIsKeyOrderRuleExceptionMap: Record<\n  KeyOrderRuleExceptionNodeType,\n  (parent: Rule.Node) => boolean\n> = {\n  // @ts-ignore The type doesn't contain the property \"name\", even though it exists.\n  [AST_NODE_TYPES.CallExpression]: (parent: TSESTree.CallExpression) =>\n    // @ts-ignore The type doesn't contain the property \"name\", even though it exists.\n    /createSlice$/i.test(parent.callee.name),\n  // @ts-ignore The type doesn't contain the property \"name\", even though it exists.\n  [AST_NODE_TYPES.Property]: (parent: TSESTree.Property) =>\n    // @ts-ignore The type doesn't contain the property \"name\", even though it exists.\n    /reducers$/i.test(parent.key.name),\n};\n\n/**\n * @param parent The parent node of the currently traversed node.\n * @returns A Boolean that checks if the parent node is a key order rule exception.\n */\nexport const isKeyOrderRuleException = (parent: Rule.Node) =>\n  nodeParentTypeToIsKeyOrderRuleExceptionMap[\n    parent.type as KeyOrderRuleExceptionNodeType\n  ]?.(parent);\n"]}