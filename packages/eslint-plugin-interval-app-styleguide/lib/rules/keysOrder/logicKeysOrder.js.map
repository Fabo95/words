{"version":3,"file":"logicKeysOrder.js","sourceRoot":"","sources":["../../../src/rules/keysOrder/logicKeysOrder.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEqual, partition } from 'lodash';\nimport { SourceLocation } from '@typescript-eslint/types/dist/ast-spec';\nimport {\n  AST_NODE_TYPES,\n  TSESLint,\n} from '@typescript-eslint/experimental-utils';\nimport { Rule } from 'eslint';\n\nimport {\n  Element,\n  getCategorizedElements,\n  getSortedElements,\n} from '@styleguide/rules/utils/elementOrderHelpers';\nimport { isKeyOrderRuleException } from '@styleguide/rules/keysOrder/utils/keysOrderHelpers';\n\nexport const checkOrderKeys = (\n  context: TSESLint.RuleContext<string, []>\n): TSESLint.RuleListener => {\n  return {\n    TSEnumDeclaration({ loc, members, type }) {\n      testAndReport(context, loc, members, type);\n    },\n    TSInterfaceBody({ loc, body, type }) {\n      testAndReport(context, loc, body, type);\n    },\n    TSTypeLiteral({ loc, members, type }) {\n      testAndReport(context, loc, members, type);\n    },\n    ObjectExpression({ loc, properties, type, parent }) {\n      testAndReport(context, loc, properties, type, parent as Rule.Node);\n    },\n    ObjectPattern({ loc, properties, type, parent }) {\n      testAndReport(context, loc, properties, type, parent as Rule.Node);\n    },\n  };\n};\n\n/**\n * Checks expressions and reports rule violations for objects' alphabetical prop order.\n *\n * @param context An object that contains information that is relevant to the context of the currently traversed node, like its source code or its scope.\n * @param location An object specifying the location of the node within the source code.\n * @param elements An array of all the other nodes that are contained in the node.\n * @param type A string literal that contains the AST node type of the node.\n * @param parent The parent node of the currently traversed node.\n * @returns void\n */\nconst testAndReport = (\n  context: TSESLint.RuleContext<string, []>,\n  location: SourceLocation,\n  elements: Element[],\n  type: AST_NODE_TYPES,\n  parent?: Rule.Node\n) => {\n  if (parent && isKeyOrderRuleException(parent)) {\n    return;\n  }\n\n  const sourceCode = context.getSourceCode();\n\n  const [restKeys, dollarKeys] = getCategorizedElements(elements, sourceCode);\n\n  const unsortedKeys = elements.filter(\n    (element) => !['{', '.'].includes(sourceCode.getText(element).charAt(0))\n  );\n\n  let sortedKeys = getSortedElements(restKeys, dollarKeys, sourceCode).filter(\n    (element) => !(sourceCode.getText(element).charAt(0) === '.')\n  );\n\n  if (type === AST_NODE_TYPES.ObjectExpression) {\n    const [shortHandProperties, restKeys] = partition(\n      sortedKeys,\n      (item) => item.type === 'Property' && item.shorthand\n    );\n\n    sortedKeys = [...shortHandProperties, ...restKeys];\n  }\n\n  if (isEqual(unsortedKeys, sortedKeys)) {\n    return;\n  }\n\n  context.report({\n    messageId: 'defaultMessage',\n    loc: location,\n    *fix(fixer) {\n      for (let i = 0; i < sortedKeys.length; i++) {\n        yield fixer.replaceText(\n          unsortedKeys[i],\n          sourceCode.getText(sortedKeys[i])\n        );\n      }\n    },\n  });\n};\n"]}