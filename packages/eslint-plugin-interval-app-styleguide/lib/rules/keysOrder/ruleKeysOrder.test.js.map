{"version":3,"file":"ruleKeysOrder.test.js","sourceRoot":"","sources":["../../../src/rules/keysOrder/ruleKeysOrder.test.ts"],"names":[],"mappings":";;AAAA,8EAAiE;AAEjE,6EAA0E;AAE1E,MAAM,UAAU,GAAwB,IAAI,6BAAQ,CAAC,UAAU,CAAC;IAC9D,GAAG,EAAE;QACH,OAAO,EAAE,IAAI;QACb,MAAM,EAAE,IAAI;KACb;IACD,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,2BAA2B,CAAC;IACpD,aAAa,EAAE;QACb,YAAY,EAAE;YACZ,GAAG,EAAE,IAAI;SACV;QACD,WAAW,EAAE,EAAE;QACf,UAAU,EAAE,QAAQ;KACrB;CACF,CAAC,CAAC;AAEH,MAAM,eAAe,GAAiC;IACpD;QACE,IAAI,EAAE;;;;;;OAMH;KACJ;IACD;QACE,IAAI,EAAE;;;;OAIH;KACJ;IACD;QACE,IAAI,EAAE;;;;;;;;;;OAUH;KACJ;IACD;QACE,IAAI,EAAE;;;;MAIJ;KACH;IACD;QACE,IAAI,EAAE;;;;QAIF;KACL;IACD;QACE,IAAI,EAAE;;;;;;;;;;;;;oBAaU;KACjB;IACD;QACE,IAAI,EAAE;;;;;;;mBAOS;KAChB;CACF,CAAC;AAEF,MAAM,iBAAiB,GAAqD;IAC1E;QACE,IAAI,EAAE,sFAAsF;QAC5F,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;QACzC,MAAM,EAAE,sFAAsF;KAC/F;IACD;QACE,IAAI,EAAE;;;;;;;;YAQE;QACR,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;QACzC,MAAM,EAAE;;;;;;;;YAQA;KACT;IACD;QACE,IAAI,EAAE;;;WAGC;QACP,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;QACzC,MAAM,EAAE;;;WAGD;KACR;IACD;QACE,IAAI,EAAE;;;;;;;UAOA;QACN,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;QACzC,MAAM,EAAE;;;;;;;UAOF;KACP;IACD;QACE,IAAI,EAAE;;;;;UAKA;QACN,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;QACzC,MAAM,EAAE;;;;;UAKF;KACP;IACD;QACE,IAAI,EAAE;;;;;;;;;;;;;oBAaU;QAChB,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;QACzC,MAAM,EAAE;;;;;;;;;;;;;oBAaQ;KACjB;IAED;QACE,IAAI,EAAE;;;;;;;mBAOS;QACf,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;QACzC,MAAM,EAAE;;;;;;;mBAOO;KAChB;CACF,CAAC;AAEF,UAAU,CAAC,GAAG,CAAC,YAAY,EAAE,6BAAa,EAAE;IAC1C,KAAK,EAAE,eAAe;IACtB,OAAO,EAAE,iBAAiB;CAC3B,CAAC,CAAC","sourcesContent":["import { TSESLint } from \"@typescript-eslint/experimental-utils\";\n\nimport { RuleKeysOrder } from \"@styleguide/rules/keysOrder/ruleKeysOrder\";\n\nconst ruleTester: TSESLint.RuleTester = new TSESLint.RuleTester({\n  env: {\n    browser: true,\n    es2021: true,\n  },\n  parser: require.resolve(\"@typescript-eslint/parser\"),\n  parserOptions: {\n    ecmaFeatures: {\n      jsx: true,\n    },\n    ecmaVersion: 12,\n    sourceType: \"module\",\n  },\n});\n\nconst validStatements: TSESLint.ValidTestCase<[]>[] = [\n  {\n    code: `export const INITIAL_EDITABLE_IMAGE_STATE: EditableImageState = {\n        contentType: \"\",\n        filename: \"\",\n        isThumbnail: false,\n        src: null,\n        title: \"\",\n    };`,\n  },\n  {\n    code: `return {\n            ...pick(initialApplicationListState, RESET_KEYS),\n            ...state,\n        filters: newFilters,\n    };`,\n  },\n  {\n    code: `export const initialApplicationListState: ApplicationListState = {\n        applications: [],\n        enquiries: [],\n        filters: {\n            groupBy: \"enquiry\",\n            seen: [true, false],\n        },\n        groupedApplicationItemRequestLoadingState: {},\n        ungroupedApplicationsTotalCount: 0,\n        ungroupedRequestLoadingState: \"Not Asked\",\n    };`,\n  },\n  {\n    code: `export enum AnalyticsDatePeriodFilterQuickSelectType {\n        LAST_MONTH = \"lastMonth\",\n        LAST_SEVEN_DAYS = \"lastSevenDays\",\n        WHOLE_PERIOD = \"wholePeriod\",\n    }`,\n  },\n  {\n    code: `useOnboarding({\n        stepsDisplayCondition,\n        isTourAllowedToStart: isHomeResponseSuccessBody,\n        page: \"dashboard\",\n    });`,\n  },\n  {\n    code: `const INITIAL_STATE = {\n                    errors: {},\n                    isEmployed: null,\n                    salutation: \"Herr\",\n                };\n\n                export const { actions: actions, reducer: reducer } = createSlice({\n                    name: \"state\",\n                    initialState: INITIAL_STATE,\n                    reducers: {\n                        response: (state, action) => ({ ...state, ...action.payload }),\n                        error: (state, action) => ({ ...state.errors, ...action.payload }),\n                    },\n                });`,\n  },\n  {\n    code: `export const CandidateSearchesListCardDesktopContent = ({\n                    canViewSearches,\n                    dataTest,\n                    savedCandidateSearch,\n                    textColor,\n                }: CandidateSearchesListCardDesktopContentProps) => {\n                    /* --- CODE --- */\n                };`,\n  },\n];\n\nconst invalidStatements: TSESLint.InvalidTestCase<\"defaultMessage\", []>[] = [\n  {\n    code: `dispatch(cvClearReference({ sectionName: CvSectionName.ENGAGEMENTS, entityID: id }))`,\n    errors: [{ messageId: \"defaultMessage\" }],\n    output: `dispatch(cvClearReference({ entityID: id, sectionName: CvSectionName.ENGAGEMENTS }))`,\n  },\n  {\n    code: `export const newInitialWorkExperience = (): WorkExperiences => ({\n            referenceEmail: null,\n            workExperienceTypeId: null,\n            city: null,\n            description: null,\n            referencePhone: null,\n            startYear: null,\n            id: negativeId(),\n        });`,\n    errors: [{ messageId: \"defaultMessage\" }],\n    output: `export const newInitialWorkExperience = (): WorkExperiences => ({\n            city: null,\n            description: null,\n            id: negativeId(),\n            referenceEmail: null,\n            referencePhone: null,\n            startYear: null,\n            workExperienceTypeId: null,\n        });`,\n  },\n  {\n    code: `validateString(email, {\n            isEmail: { value: true, message: \"Bitte gib eine gültige E-Mail ein.\" },\n            required: { message: \"Bitte gib deine E-Mail an.\", value: true },\n        })`,\n    errors: [{ messageId: \"defaultMessage\" }],\n    output: `validateString(email, {\n            isEmail: { message: \"Bitte gib eine gültige E-Mail ein.\", value: true },\n            required: { message: \"Bitte gib deine E-Mail an.\", value: true },\n        })`,\n  },\n  {\n    code: `export interface EnquiryState {\n            [EnquirySectionName.COMPETENCY_LEVELS]: EnquiryPageSection<CompetencyLevel>;\n            [EnquirySectionName.SKILLS]: EnquiryPageSection<SkillLevel>;\n            company: ApiData<MeCompaniesGetResponseBody>;\n\n            requirements: ApiData<EnquiryRequirementsResponseBody>;\n            enquiry: EnquiryEntityState<EnquiryPageEnquiry>;\n        }`,\n    errors: [{ messageId: \"defaultMessage\" }],\n    output: `export interface EnquiryState {\n            [EnquirySectionName.COMPETENCY_LEVELS]: EnquiryPageSection<CompetencyLevel>;\n            [EnquirySectionName.SKILLS]: EnquiryPageSection<SkillLevel>;\n            company: ApiData<MeCompaniesGetResponseBody>;\n\n            enquiry: EnquiryEntityState<EnquiryPageEnquiry>;\n            requirements: ApiData<EnquiryRequirementsResponseBody>;\n        }`,\n  },\n  {\n    code: `dispatch(\n            enquiryAddEntity({\n                sectionName: SECTION_NAME,\n                entity: copyToNewEnquiry ? { ...languageLevel, id: negativeId() } : languageLevel,\n            })\n        )`,\n    errors: [{ messageId: \"defaultMessage\" }],\n    output: `dispatch(\n            enquiryAddEntity({\n                entity: copyToNewEnquiry ? { ...languageLevel, id: negativeId() } : languageLevel,\n                sectionName: SECTION_NAME,\n            })\n        )`,\n  },\n  {\n    code: `const INITIAL_STATE = {\n                    salutation: \"Herr\",\n                    isEmployed: null,\n                    errors: {},\n                };\n\n                export const { actions: actions, reducer: reducer } = createSlice({\n                    name: \"state\",\n                    initialState: INITIAL_STATE,\n                    reducers: {\n                        response: (state, action) => ({ ...state, ...action.payload }),\n                        error: (state, action) => ({ ...state.errors, ...action.payload }),\n                    },\n                });`,\n    errors: [{ messageId: \"defaultMessage\" }],\n    output: `const INITIAL_STATE = {\n                    errors: {},\n                    isEmployed: null,\n                    salutation: \"Herr\",\n                };\n\n                export const { actions: actions, reducer: reducer } = createSlice({\n                    name: \"state\",\n                    initialState: INITIAL_STATE,\n                    reducers: {\n                        response: (state, action) => ({ ...state, ...action.payload }),\n                        error: (state, action) => ({ ...state.errors, ...action.payload }),\n                    },\n                });`,\n  },\n\n  {\n    code: `export const CandidateSearchesListCardDesktopContent = ({\n                    dataTest,\n                    canViewSearches,\n                    textColor,\n                    savedCandidateSearch,\n                }: CandidateSearchesListCardDesktopContentProps) => {\n                    /* --- CODE --- */\n                };`,\n    errors: [{ messageId: \"defaultMessage\" }],\n    output: `export const CandidateSearchesListCardDesktopContent = ({\n                    canViewSearches,\n                    dataTest,\n                    savedCandidateSearch,\n                    textColor,\n                }: CandidateSearchesListCardDesktopContentProps) => {\n                    /* --- CODE --- */\n                };`,\n  },\n];\n\nruleTester.run(\"keys-order\", RuleKeysOrder, {\n  valid: validStatements,\n  invalid: invalidStatements,\n});\n"]}